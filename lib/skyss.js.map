{"version":3,"sources":["skyss.js"],"names":[],"mappings":";;;;;QAagB;QAUA;;;;;;;;;;;;;;AAjBhB,yBAAO,MAAP,CAAc,IAAd;;;AACA,IAAM,qBAAqB,uEAArB;;AAEN,SAAS,MAAT,OAA8E;QAA7D,mBAA6D;QAAtD,eAAsD;wBAAjD,IAAiD;QAAjD,+BAAM,aAA2C;yBAAxC,KAAwC;QAAxC,iCAAO,cAAiC;gCAA9B,YAA8B;QAA9B,+CAAc,qBAAgB;yBAAb,KAAa;QAAb,iCAAO,iBAAM;;AAC1E,WAAU,+CAA0C,+BAA0B,iBAAY,4BAAuB,+CAA0C,oBAAe,2FAA1K,CAD0E;CAA9E;;AAIO,SAAS,gBAAT,CAA0B,OAA1B,EAAkC;AACrC,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,sBAAc,OAAd,EAAuB,IAAvB,CAA4B,UAAC,IAAD,EAAU;AAClC,oBAAQ,mBAAM,IAAN,CAAR,EADkC;SAAV,CAA5B,CAEG,KAFH,CAES,UAAC,CAAD,EAAO;AACZ,mBAAO,CAAP,EADY;SAAP,CAFT,CADoC;KAArB,CAAnB,CADqC;CAAlC;;AAUA,SAAS,aAAT,QAAkC;QAAV,kBAAU;QAAJ,cAAI;;AACrC,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,YAAI,MAAM,OAAO;AACb,mBAAO,mBAAmB,IAAnB,CAAP;AACA,iBAAK,mBAAmB,EAAnB,CAAL;SAFM,CAAN,CADgC;;AAMpC,0BAAI,GAAJ,EAAS,UAAC,KAAD,EAAQ,QAAR,EAAkB,IAAlB,EAA2B;AAChC,gBAAI,CAAC,KAAD,IAAU,SAAS,UAAT,KAAwB,GAAxB,EAA6B;AACvC,wBAAQ,uBAAU,IAAV,EAAgB,GAAhB,CAAoB,UAAC,IAAD,EAAU;AAClC,2BAAO;AACH,kCADG;AAEH,8BAAM,yBAAO,EAAP,CAAU,IAAV,EAAgB,OAAhB,EAAyB,aAAzB,EAAwC,OAAxC,EAAN;qBAFJ,CADkC;iBAAV,CAA5B,EADuC;aAA3C,MAOO;AACH,uBAAO;AACH,6BAAS,WAAT;AACA,gCAFG;iBAAP,EADG;aAPP;SADK,CAAT,CANoC;KAArB,CAAnB,CADqC;CAAlC","file":"skyss.js","sourcesContent":["import { get } from 'request';\r\n//import moment from 'moment';\r\nimport moment from 'moment-timezone';\r\nimport { first } from 'lodash';\r\nimport { parseData } from './parser';\r\n\r\nmoment.locale('nb');\r\nconst baseTravelMagicUrl = 'http://reiseplanlegger.skyss.no/scripts/travelmagic/TravelMagicWE.dll';\r\n\r\nfunction getUrl({from1, to1, now = 1, buss = 1, expressbuss = 1, lang = 'en'}){\r\n    return `${baseTravelMagicUrl}/svar?referrer=&lang=${lang}&dep1=&theme=&from=${from1}&to=${to1}&Time=&Date=&now=${now}&direction=1&search=S%C3%B8k&GetTR0=${buss}&GetTR1=${expressbuss}&through=&throughpause=&changepenalty=1&changepause=0&linjer=&destinations=`;\r\n}\r\n\r\nexport function getNextDeparture(options){\r\n    return new Promise((resolve, reject) => {\r\n        getDepartures(options).then((data) => {\r\n            resolve(first(data));\r\n        }).catch((e) => {\r\n            reject(e);\r\n        });\r\n    });\r\n}\r\n\r\nexport function getDepartures({from, to}){\r\n    return new Promise((resolve, reject) => {\r\n        var url = getUrl({\r\n            from1: encodeURIComponent(from),\r\n            to1: encodeURIComponent(to)\r\n        });\r\n\r\n        get(url, (error, response, body) => {\r\n            if (!error && response.statusCode === 200) {\r\n                resolve(parseData(body).map((time) => {\r\n                    return {\r\n                        time,\r\n                        when: moment.tz(time, 'hh:mm', 'Europe/Oslo').fromNow()\r\n                    };\r\n                }));\r\n            } else {\r\n                reject({\r\n                    message: 'the error',\r\n                    error\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n"],"sourceRoot":"/source/"}