{"version":3,"sources":["server/travelmagic.js"],"names":[],"mappings":";;;;;QAoCgB;;;;;;;;;;;;AAhChB,SAAS,cAAT,CAAwB,IAAxB,EAA6B;QAClB,MAAY,KAAZ,IADkB;QACb,MAAO,KAAP,IADa;;AAEzB,QAAM,UAAU,GAAV,CAFmB;AAGzB,QAAM,4DAAmD,cAAS,oBAAe,OAA3E,CAHmB;;AAKzB,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAmB;AAClC,+BAAQ;AACJ,oBAAQ,KAAR;AACA,iBAAK,GAAL;SAFJ,EAGG,UAAC,KAAD,EAAQ,QAAR,EAAkB,IAAlB,EAA2B;AAC1B,gBAAI,KAAJ,EAAW;AACP,uBAAO,KAAP,EADO;AAEP,uBAFO;aAAX;;AAKA,qCAAY,IAAZ,EAAkB,UAAC,GAAD,EAAM,MAAN,EAAgB;AAC9B,oBAAI,GAAJ,EAAS;AACL,2BAAO,GAAP,EADK;AAEL,2BAFK;iBAAT;;AAKA,oBAAI,QAAQ,EAAR,CAN0B;AAO9B,oBAAI,OAAO,MAAP,IAAiB,OAAO,MAAP,CAAc,KAAd,IAAuB,OAAO,MAAP,CAAc,KAAd,CAAoB,MAApB,GAA6B,CAA7B,EAA+B;AACvE,4BAAQ,OAAO,MAAP,CAAc,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAyB,CAAzB,CAD+D;iBAA3E;;AAIA,wBAAQ,KAAR,EAX8B;aAAhB,CAAlB,CAN0B;SAA3B,CAHH,CADkC;KAAnB,CAAnB,CALyB;CAA7B;;AAgCO,SAAS,kCAAT,CAA4C,IAA5C,EAAkD,EAAlD,EAAqD;;AAExD,WAAO,eAAe,IAAf,EAAqB,IAArB,CAA0B,UAAC,KAAD,EAAW;AACxC,eAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAmB;AAClC,gBAAM,yDAAgD,iBAAY,iBAA5D,CAD4B;;AAGlC,mCAAQ;AACJ,wBAAQ,KAAR;AACA,qBAAK,GAAL;aAFJ,EAGG,UAAC,KAAD,EAAQ,QAAR,EAAkB,IAAlB,EAA2B;AAC1B,oBAAI,KAAJ,EAAW;AACP,2BAAO,KAAP,EADO;AAEP,2BAFO;iBAAX;;AAKA,yCAAY,IAAZ,EAAkB,UAAC,GAAD,EAAM,MAAN,EAAiB;AAC/B,wBAAI,GAAJ,EAAS,MAAM,EAAE,OAAO,GAAP,EAAR,CAAT;;AAEA,wBAAM,QAAQ,OAAO,MAAP,CAAc,KAAd,CAAoB,CAApB,EAAuB,IAAvB,CAHiB;AAI/B,wBAAM,OAAO,MAAM,GAAN,CAAU,UAAC,IAAD,EAAU;0CACI,KAAK,CAAL,CAAO,CAAP,EAAU,CAAV,CADJ;4BACrB,kBADqB;4BAClB,oBADkB;4BACd,oBADc;4BACV,kBADU;4BACP,oBADO;4BACH,oBADG;;AAE7B,+BAAO;AACH,kCAAM,KAAK,CAAL;AACN,mCAAO;AACH,sCAAM,CAAN;AACA,oCAAI,EAAJ;AACA,2CAAW,EAAX;AACA,yCAAS,CAAT;AACA,sCAAM,EAAN;AACA,6CAAa,EAAb;6BANJ;yBAFJ,CAF6B;qBAAV,CAAV,CAaV,MAbU,CAaH;+BAAK,EAAE,KAAF,CAAQ,IAAR,IAAgB,OAAhB;qBAAL,CAbJ,CAJyB;;AAmB/B,4BAAQ,IAAR,EAnB+B;iBAAjB,CAAlB,CAN0B;aAA3B,CAHH,CAHkC;SAAnB,CAAnB,CADwC;KAAX,CAAjC,CAFwD;CAArD","file":"server/travelmagic.js","sourcesContent":["import request from 'request';\nimport { parseString } from 'xml2js';\nimport { baseTravelMagicUrl } from './utils';\n\nfunction getNearestStop(from){\n    const {lat, lng} = from;\n    const maxdist = 250;\n    const url = `${baseTravelMagicUrl}/v1NearestStopsXML?y=${lat}&x=${lng}&maxdist=${maxdist}`;\n\n    return new Promise((resolve, reject)=>{\n        request({\n            method: 'get',\n            uri: url\n        }, (error, response, body) => {\n            if (error) {\n                reject(error);\n                return;\n            }\n\n            parseString(body, (err, result)=> {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n\n                let value = '';\n                if (result.stages && result.stages.group && result.stages.group.length > 0){\n                    value = result.stages.group[0].$.n;\n                }\n\n                resolve(value);\n            });\n        });\n    });\n}\n\nexport function getNextDeparturesFromGeoToLocation(from, to){\n\n    return getNearestStop(from).then((value) => {\n        return new Promise((resolve, reject)=>{\n            const url = `${baseTravelMagicUrl}/v1SearchXML?From=${value}&to=${to}&instant=1`;\n\n            request({\n                method: 'get',\n                uri: url\n            }, (error, response, body) => {\n                if (error) {\n                    reject(error);\n                    return;\n                }\n\n                parseString(body, (err, result) => {\n                    if (err) throw { error: err };\n\n                    const trips = result.result.trips[0].trip;\n                    const deps = trips.map((trip) => {\n                        const { n, n2, nd, l, tn, td } = trip.i[0].$;\n                        return {\n                            trip: trip.$,\n                            first: {\n                                from: n,\n                                to: n2,\n                                line_name: nd,\n                                line_no: l,\n                                kind: tn,\n                                travel_time: td\n                            }\n                        };\n                    }).filter(d => d.first.kind != 'Gange');\n\n                    resolve(deps);\n                });\n            });\n        });\n    });\n}\n\n/*\nexport function getLocation(filter){\n    //http://reiseplanlegger.skyss.no/scripts/travelmagic/TravelMagicWE.dll//v2LocationXML?filter=Danmarks plass&type=1\n}\n*/\n"],"sourceRoot":"/source/"}