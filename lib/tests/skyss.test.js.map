{"version":3,"sources":["tests/skyss.test.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAOA,IAAM,WAAW,yBAAa,OAAb,CAAX;;AAEN,SAAS,aAAT,EAAwB,YAAW;;AAE/B,QAAI,iBAAJ;QAAW,uBAAX,CAF+B;AAG/B,WAAO,YAAU;AACb,sBAAc,gBAAM,IAAN,oBAAoB,KAApB,CAAd,CADa;AAEb,gBAAQ,0BAAW,YAAX,EAAyB,EAAE,WAAW,WAAX,EAA3B,CAAR,CAFa;;AAIb,oBAAY,iBAAZ,CAA8B,CAA9B,EAAiC,KAAjC,EAAwC,EAAC,YAAY,GAAZ,EAAzC,EAA2D,QAA3D,EAJa;KAAV,CAAP,CAH+B;;AAU/B,UAAM,YAAU;AACZ,oBAAY,KAAZ,GADY;KAAV,CAAN,CAV+B;;AAc/B,OAAG,gCAAH,EAAqC,UAAU,IAAV,EAAgB;AACjD,cAAM,gBAAN,CAAuB;AACnB,kBAAO,UAAP;AACA,gBAAI,UAAJ;SAFJ,EAGG,IAHH,CAGQ,uBAAW,UAAC,IAAD,EAAU;AACzB,8BAAO,IAAP,EAAa,EAAb,CAAgB,OAAhB,CAAwB,EAAE,MAAM,OAAN,EAA1B,EADyB;SAAV,EAEhB,IAFK,CAHR,EAKU,KALV,CAKgB,UAAC,CAAD,EAAO;AACnB,iBAAK,CAAL,EADmB;SAAP,CALhB,CADiD;KAAhB,CAArC,CAd+B;;AAyB/B,OAAG,4BAAH,EAAiC,UAAS,IAAT,EAAc;AAC3C,cAAM,aAAN,CAAoB,EAAE,MAAM,UAAN,EAAkB,IAAI,UAAJ,EAAxC,EACK,IADL,CACU,uBAAW,UAAC,IAAD,EAAU;AACvB,8BAAO,IAAP,EAAa,EAAb,CAAgB,CAAhB,CAAkB,OAAlB,EADuB;AAEvB,8BAAO,KAAK,MAAL,CAAP,CAAoB,EAApB,CAAuB,KAAvB,CAA6B,EAA7B,EAFuB;AAGvB,8BAAO,mBAAM,IAAN,CAAP,EAAoB,EAApB,CAAuB,OAAvB,CAA+B,EAAE,MAAM,OAAN,EAAjC,EAHuB;AAIvB,8BAAO,kBAAK,IAAL,CAAP,EAAmB,EAAnB,CAAsB,OAAtB,CAA8B,EAAE,MAAM,OAAN,EAAhC,EAJuB;SAAV,EAKd,IALG,CADV,EAMc,KANd,CAMoB,UAAC,CAAD,EAAK;AACjB,iBAAK,CAAL,EADiB;SAAL,CANpB,CAD2C;KAAd,CAAjC,CAzB+B;CAAX,CAAxB","file":"tests/skyss.test.js","sourcesContent":["import { expect } from 'chai';\r\nimport { first, last } from 'lodash';\r\nimport request from 'request';\r\nimport proxyquire from 'proxyquire';\r\nimport sinon from 'sinon';\r\nimport { asyncCatch, readTestData } from './utils.test';\r\n\r\nconst testData = readTestData('1.txt');\r\n\r\ndescribe('skyss tests', function() {\r\n\r\n    let skyss, requestStub;\r\n    before(function(){\r\n        requestStub = sinon.stub(request, 'get');\r\n        skyss = proxyquire('./../skyss', { 'request': requestStub });\r\n\r\n        requestStub.callsArgWithAsync(1, false, {statusCode: 200}, testData);\r\n    });\r\n\r\n    after(function(){\r\n        requestStub.reset();\r\n    });\r\n\r\n    it('should find the next departure', function (done) {\r\n        skyss.getNextDeparture({\r\n            from : 'whatever',\r\n            to: 'whatever'\r\n        }).then(asyncCatch((data) => {\r\n            expect(data).to.include({ time: '12:51' });\r\n        }, done)).catch((e) => {\r\n            done(e);\r\n        });\r\n    });\r\n\r\n    it('should find all departures', function(done){\r\n        skyss.getDepartures({ from: 'whatever', to: 'whatever' })\r\n            .then(asyncCatch((data) => {\r\n                expect(data).be.a('array');\r\n                expect(data.length).to.equal(10);\r\n                expect(first(data)).to.include({ time: '12:51'});\r\n                expect(last(data)).to.include({ time: '15:41'});\r\n            }, done)).catch((e)=>{\r\n                done(e);\r\n            });\r\n    });\r\n});\r\n"],"sourceRoot":"/source/"}