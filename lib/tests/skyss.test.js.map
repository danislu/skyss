{"version":3,"sources":["tests/skyss.test.js"],"names":[],"mappings":"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","file":"tests/skyss.test.js","sourcesContent":["\n//import { first, last } from 'lodash';\n//import proxyquire from 'proxyquire';\n//import sinon from 'sinon';\n//import moment from 'moment';\n//import mockdate from 'mockdate';\n\nimport request from 'request';\nimport { expect } from 'chai';\nimport { asyncCatch /*, readTestData */ } from './utils.test';\nimport { parseString } from 'xml2js';\nimport { /*getNextDeparturesFromGeoToLocation,*/ getSuggestions } from './../server/skyss';\n\nconst latLng = {\n    y: 60.3006106,\n    x: 5.304968199999999\n};\n\nconst maxdist = 100;\nconst baseUrl = 'http://reiseplanlegger.skyss.no/scripts/travelmagic/TravelMagicWE.dll';\nconst nearestStop = 'Dortledhaugen (Bergen)';\nconst dkPlassStopName = 'Danmarks plass (Bergen)';\nconst lagunenStopName = 'Lagunen (Bergen)';\n\ndescribe('testing travelmagic api', function() {\n    it('should get the nearest stops to this location', function(done){\n        const url = `${baseUrl}/v1NearestStopsXML?y=${latLng.y}&x=${latLng.x}&maxdist=${maxdist}`;\n\n        return new Promise((resolve)=> {\n            request({\n                method: 'get',\n                uri: url\n            }, asyncCatch((error, response, body) => {\n                if (error) throw { error: error };\n\n                expect(body).to.not.be.null;\n                expect(body).to.not.be.undefined;\n                expect(body).to.not.equal('');\n\n                parseString(body, (err, result)=> {\n                    if (err) throw { error: err };\n\n                    const firstGroup = result.stages.group[0];\n                    expect(firstGroup.$.n).to.be.equal(nearestStop);\n\n                    resolve(true);\n                });\n            }, done));\n        });\n    });\n\n    it('should get route', function(done){\n        const date = '15.03.2016'; // dd.mm.yyy\n        const time = '03.00'; // hh.mm\n        const url = `${baseUrl}/v1SearchXML?From=${dkPlassStopName}&to=${lagunenStopName}&instant=1&Date=${date}&Time=${time}`;\n\n        return new Promise((resolve)=> {\n            request({\n                method: 'get',\n                uri: url\n            }, asyncCatch((error, response, body) => {\n                if (error) throw { error: error };\n\n                parseString(body, (err, result) => {\n                    if (err) throw { error: err };\n\n                    const trips = result.result.trips[0].trip;\n                    const deps = trips.map((trip) => {\n                        const { n, n2, nd, l, tn, td } = trip.i[0].$;\n                        return {\n                            trip: trip.$,\n                            first: {\n                                from: n,\n                                to: n2,\n                                line_name: nd,\n                                line_no: l,\n                                kind: tn,\n                                travel_time: td\n                            }\n                        };\n                    }).filter(d => d.first.kind != 'Gange');\n                    //console.log(deps);\n\n                    resolve(deps);\n                });\n            }, done));\n        });\n    });\n\n    /*it('api test 1', function(done){\n        return getNextDeparturesFromGeoToLocation(latLng, dkPlassStopName)\n            .then(asyncCatch((value)=>{\n                expect(value.length).to.be.equal(10);\n            }, done))\n            .catch(done);\n    });*/\n\n    it('test suggestions', function(done){\n        return getSuggestions('Danmarks')\n            .then(asyncCatch((value)=>{\n                expect(value.length).to.be.equal(4);\n            }, done))\n            .catch(done);\n    });\n});\n"],"sourceRoot":"/source/"}