{"version":3,"sources":["tests/skyss.test.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,IAAM,SAAS;AACX,OAAG,UAAH;AACA,OAAG,iBAAH;CAFE;;AAKN,IAAM,kBAAkB,yBAAlB;;AAEN,SAAS,MAAT,EAAiB,YAAU;;AAEvB,QAAI,mBAAJ;QAAa,uBAAb,CAFuB;AAGvB,WAAO,YAAU;AACb,2BAAS,GAAT,CAAa,sBAAO,OAAP,EAAgB,OAAhB,CAAb,EADa;KAAV,CAAP,CAHuB;;AAOvB,UAAM,YAAU;AACZ,2BAAS,KAAT,GADY;KAAV,CAAN,CAPuB;;AAWvB,eAAW,YAAU;AACjB,kBAAU,gBAAM,OAAN,CAAc,MAAd,EAAV,CADiB;;AAGjB,sBAAc,QAAQ,IAAR,oBAAsB,KAAtB,CAAd,CAHiB;AAIjB,kCAAW,mBAAX,EAAgC,EAAE,WAAW,WAAX,EAAlC,EAJiB;KAAV,CAAX,CAXuB;;AAkBvB,cAAU,YAAU;AAChB,gBAAQ,OAAR,GADgB;KAAV,CAAV,CAlBuB;;AAuBvB,OAAG,YAAH,EAAiB,UAAS,IAAT,EAAc;AAC3B,oBAAY,WAAZ,GAA0B,iBAA1B,CAA4C,CAA5C,EAA+C,KAA/C,EAAsD,EAAC,YAAY,GAAZ,EAAvD,EAAyE,yBAAa,kBAAb,CAAzE,EAD2B;AAE3B,oBAAY,YAAZ,GAA2B,iBAA3B,CAA6C,CAA7C,EAAgD,KAAhD,EAAuD,EAAC,YAAY,GAAZ,EAAxD,EAA0E,yBAAa,YAAb,CAA1E,EAF2B;;AAI3B,eAAO,+CAAmC,MAAnC,EAA2C,eAA3C,EACF,IADE,CACG,uBAAW,UAAC,KAAD,EAAS;AACtB,8BAAO,MAAM,MAAN,CAAP,CAAqB,EAArB,CAAwB,EAAxB,CAA2B,KAA3B,CAAiC,EAAjC,EADsB;SAAT,EAEd,IAFG,CADH,EAIF,KAJE,CAII,IAJJ,CAAP,CAJ2B;KAAd,CAAjB,CAvBuB;;AAkCvB,OAAG,kBAAH,EAAuB,UAAS,IAAT,EAAc;AACjC,oBAAY,WAAZ,GAA0B,iBAA1B,CAA4C,CAA5C,EAA+C,KAA/C,EAAsD,EAAC,YAAY,GAAZ,EAAvD,EAAyE,yBAAa,cAAb,CAAzE,EADiC;;AAGjC,eAAO,2BAAe,UAAf,EACF,IADE,CACG,uBAAW,UAAC,KAAD,EAAS;AACtB,8BAAO,MAAM,MAAN,CAAP,CAAqB,EAArB,CAAwB,EAAxB,CAA2B,KAA3B,CAAiC,CAAjC,EADsB;SAAT,EAEd,IAFG,CADH,EAIF,KAJE,CAII,IAJJ,CAAP,CAHiC;KAAd,CAAvB,CAlCuB;;AA4CvB,OAAG,SAAH,EAAc,UAAS,IAAT,EAAc;AACxB,oBAAY,WAAZ,GAA0B,iBAA1B,CAA4C,CAA5C,EAA+C,KAA/C,EAAsD,EAAC,YAAY,GAAZ,EAAvD,EAAyE,kDAAzE,EADwB;AAExB,eAAO,+CAAmC;AACtC,eAAG,OAAH;AACA,eAAG,CAAC,OAAD;SAFA,EAGJ,SAHI,EAIF,IAJE,CAIG,uBAAW,YAAI;AACjB,kBAAM,EAAE,OAAO,KAAP,EAAR,CADiB;SAAJ,EAEd,IAFG,CAJH,EAOF,KAPE,CAOI,uBAAW,UAAC,CAAD,EAAK;AACnB,8BAAO,CAAP,EAAU,EAAV,CAAa,OAAb,CAAqB,EAAE,OAAO,gBAAP,EAAvB,EADmB;SAAL,EAEhB,IAFK,CAPJ,CAAP,CAFwB;KAAd,CAAd,CA5CuB;CAAV,CAAjB","file":"tests/skyss.test.js","sourcesContent":["\n//import { first, last } from 'lodash';\nimport proxyquire from 'proxyquire';\nimport sinon from 'sinon';\nimport moment from 'moment';\nimport mockdate from 'mockdate';\n\nimport request from 'request';\nimport { expect } from 'chai';\nimport { asyncCatch, readTestData } from './utils.test';\nimport { getNextDeparturesFromGeoToLocation, getSuggestions } from './../server/skyss';\n\nconst latLng = {\n    y: 60.3006106,\n    x: 5.304968199999999\n};\n\nconst dkPlassStopName = 'Danmarks plass (Bergen)';\n\ndescribe('asdf', function(){\n\n    let sandbox, requestStub;\n    before(function(){\n        mockdate.set(moment('12:30', 'hh:mm'));\n    });\n\n    after(function(){\n        mockdate.reset();\n    });\n\n    beforeEach(function(){\n        sandbox = sinon.sandbox.create();\n\n        requestStub = sandbox.stub(request, 'get');\n        proxyquire('./../server/skyss', { 'request': requestStub });\n    });\n\n    afterEach(function(){\n        sandbox.restore();\n    });\n\n\n    it('api test 1', function(done){\n        requestStub.onFirstCall().callsArgWithAsync(1, false, {statusCode: 200}, readTestData('nearestStops.xml'));\n        requestStub.onSecondCall().callsArgWithAsync(1, false, {statusCode: 200}, readTestData('search.xml'));\n\n        return getNextDeparturesFromGeoToLocation(latLng, dkPlassStopName)\n            .then(asyncCatch((value)=>{\n                expect(value.length).to.be.equal(10);\n            }, done))\n            .catch(done);\n    });\n\n    it('test suggestions', function(done){\n        requestStub.onFirstCall().callsArgWithAsync(1, false, {statusCode: 200}, readTestData('location.xml'));\n\n        return getSuggestions('Danmarks')\n            .then(asyncCatch((value)=>{\n                expect(value.length).to.be.equal(4);\n            }, done))\n            .catch(done);\n    });\n\n    it('test it', function(done){\n        requestStub.onFirstCall().callsArgWithAsync(1, false, {statusCode: 200}, '<?xml version=\"1.0\" encoding=\"UTF-8\" ?><stages/>' );\n        return getNextDeparturesFromGeoToLocation({\n            x: 39.0437,\n            y: -77.4875\n        }, 'Lagunen')\n            .then(asyncCatch(()=>{\n                throw { error: 'wtf' };\n            }, done))\n            .catch(asyncCatch((v)=>{\n                expect(v).to.include({ error: 'No stops found' });\n            },done));\n    });\n});\n"],"sourceRoot":"/source/"}