{"version":3,"sources":["tests/skyss.test.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAM,WAAW,yBAAa,OAAb,CAAX;;AAEN,SAAS,aAAT,EAAwB,YAAW;;AAE/B,QAAI,iBAAJ;QAAW,uBAAX,CAF+B;AAG/B,WAAO,YAAU;AACb,2BAAS,GAAT,CAAa,sBAAO,OAAP,EAAgB,OAAhB,CAAb,EADa;;AAGb,sBAAc,gBAAM,IAAN,oBAAoB,KAApB,CAAd,CAHa;AAIb,gBAAQ,0BAAW,YAAX,EAAyB,EAAE,WAAW,WAAX,EAA3B,CAAR,CAJa;;AAMb,oBAAY,iBAAZ,CAA8B,CAA9B,EAAiC,KAAjC,EAAwC,EAAC,YAAY,GAAZ,EAAzC,EAA2D,QAA3D,EANa;KAAV,CAAP,CAH+B;;AAY/B,UAAM,YAAU;AACZ,2BAAS,KAAT,GADY;AAEZ,oBAAY,KAAZ,GAFY;KAAV,CAAN,CAZ+B;;AAiB/B,OAAG,gCAAH,EAAqC,UAAU,IAAV,EAAgB;AACjD,cAAM,gBAAN,CAAuB,EAAE,MAAO,UAAP,EAAmB,IAAI,UAAJ,EAA5C,EACK,IADL,CACU,uBAAW,UAAC,IAAD,EAAU;AACvB,8BAAO,IAAP,EAAa,EAAb,CAAgB,OAAhB,CAAwB,EAAE,MAAM,OAAN,EAAe,MAAM,gBAAN,EAAzC,EADuB;SAAV,EAEd,IAFG,CADV,EAIK,KAJL,CAIW,IAJX,EADiD;KAAhB,CAArC,CAjB+B;;AAyB/B,OAAG,4BAAH,EAAiC,UAAS,IAAT,EAAc;AAC3C,cAAM,aAAN,CAAoB,EAAE,MAAM,UAAN,EAAkB,IAAI,UAAJ,EAAxC,EACK,IADL,CACU,uBAAW,UAAC,IAAD,EAAU;AACvB,8BAAO,IAAP,EAAa,EAAb,CAAgB,CAAhB,CAAkB,OAAlB,EADuB;AAEvB,8BAAO,KAAK,MAAL,CAAP,CAAoB,EAApB,CAAuB,KAAvB,CAA6B,EAA7B,EAFuB;AAGvB,8BAAO,mBAAM,IAAN,CAAP,EAAoB,EAApB,CAAuB,OAAvB,CAA+B,EAAE,MAAM,OAAN,EAAe,MAAM,gBAAN,EAAhD,EAHuB;AAIvB,8BAAO,kBAAK,IAAL,CAAP,EAAmB,EAAnB,CAAsB,OAAtB,CAA8B,EAAE,MAAM,OAAN,EAAe,MAAM,YAAN,EAA/C,EAJuB;SAAV,EAKd,IALG,CADV,EAOK,KAPL,CAOW,IAPX,EAD2C;KAAd,CAAjC,CAzB+B;CAAX,CAAxB","file":"tests/skyss.test.js","sourcesContent":["import { expect } from 'chai';\r\nimport { first, last } from 'lodash';\r\nimport request from 'request';\r\nimport proxyquire from 'proxyquire';\r\nimport sinon from 'sinon';\r\nimport moment from 'moment';\r\nimport mockdate from 'mockdate';\r\nimport { asyncCatch, readTestData } from './utils.test';\r\n\r\nconst testData = readTestData('1.txt');\r\n\r\ndescribe('skyss tests', function() {\r\n\r\n    let skyss, requestStub;\r\n    before(function(){\r\n        mockdate.set(moment('12:30', 'hh:mm'));\r\n\r\n        requestStub = sinon.stub(request, 'get');\r\n        skyss = proxyquire('./../skyss', { 'request': requestStub });\r\n\r\n        requestStub.callsArgWithAsync(1, false, {statusCode: 200}, testData);\r\n    });\r\n\r\n    after(function(){\r\n        mockdate.reset();\r\n        requestStub.reset();\r\n    });\r\n\r\n    it('should find the next departure', function (done) {\r\n        skyss.getNextDeparture({ from : 'whatever', to: 'whatever' })\r\n            .then(asyncCatch((data) => {\r\n                expect(data).to.include({ time: '12:51', when: 'om 21 minutter' });\r\n            }, done))\r\n            .catch(done);\r\n    });\r\n\r\n    it('should find all departures', function(done){\r\n        skyss.getDepartures({ from: 'whatever', to: 'whatever' })\r\n            .then(asyncCatch((data) => {\r\n                expect(data).be.a('array');\r\n                expect(data.length).to.equal(10);\r\n                expect(first(data)).to.include({ time: '12:51', when: 'om 21 minutter'});\r\n                expect(last(data)).to.include({ time: '15:41', when: 'om 3 timer'});\r\n            }, done))\r\n            .catch(done);\r\n    });\r\n});\r\n"],"sourceRoot":"/source/"}