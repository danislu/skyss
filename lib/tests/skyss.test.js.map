{"version":3,"sources":["tests/skyss.test.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAM,WAAW,yBAAa,OAAb,CAAX;;AAEN,SAAS,aAAT,EAAwB,YAAW;;AAE/B,QAAI,mBAAJ,CAF+B;AAG/B,QAAI,iBAAJ;QAAW,uBAAX,CAH+B;AAI/B,eAAW,YAAU;AACjB,kBAAU,gBAAM,OAAN,CAAc,MAAd,EAAV,CADiB;;AAGjB,2BAAS,GAAT,CAAa,sBAAO,OAAP,EAAgB,OAAhB,CAAb,EAHiB;;AAKjB,sBAAc,QAAQ,IAAR,oBAAsB,KAAtB,CAAd,CALiB;AAMjB,gBAAQ,0BAAW,mBAAX,EAAgC,EAAE,WAAW,WAAX,EAAlC,CAAR,CANiB;;AAQjB,oBAAY,iBAAZ,CAA8B,CAA9B,EAAiC,KAAjC,EAAwC,EAAC,YAAY,GAAZ,EAAzC,EAA2D,QAA3D,EARiB;KAAV,CAAX,CAJ+B;;AAe/B,cAAU,YAAU;AAChB,2BAAS,KAAT,GADgB;;AAGhB,gBAAQ,OAAR,GAHgB;KAAV,CAAV,CAf+B;;AAqB/B,OAAG,gCAAH,EAAqC,UAAU,IAAV,EAAgB;AACjD,cAAM,gBAAN,CAAuB,EAAE,MAAO,UAAP,EAAmB,IAAI,UAAJ,EAA5C,EACK,IADL,CACU,uBAAW,UAAC,IAAD,EAAU;AACvB,8BAAO,IAAP,EAAa,EAAb,CAAgB,OAAhB,CAAwB,EAAE,MAAM,OAAN,EAAe,MAAM,gBAAN,EAAzC,EADuB;SAAV,EAEd,IAFG,CADV,EAIK,KAJL,CAIW,IAJX,EADiD;KAAhB,CAArC,CArB+B;;AA6B/B,OAAG,4BAAH,EAAiC,UAAS,IAAT,EAAc;AAC3C,cAAM,aAAN,CAAoB,EAAE,MAAM,UAAN,EAAkB,IAAI,UAAJ,EAAxC,EACK,IADL,CACU,uBAAW,UAAC,IAAD,EAAU;AACvB,8BAAO,IAAP,EAAa,EAAb,CAAgB,CAAhB,CAAkB,OAAlB,EADuB;AAEvB,8BAAO,KAAK,MAAL,CAAP,CAAoB,EAApB,CAAuB,KAAvB,CAA6B,EAA7B,EAFuB;AAGvB,8BAAO,mBAAM,IAAN,CAAP,EAAoB,EAApB,CAAuB,OAAvB,CAA+B,EAAE,MAAM,OAAN,EAAe,MAAM,gBAAN,EAAhD,EAHuB;AAIvB,8BAAO,kBAAK,IAAL,CAAP,EAAmB,EAAnB,CAAsB,OAAtB,CAA8B,EAAE,MAAM,OAAN,EAAe,MAAM,YAAN,EAA/C,EAJuB;SAAV,EAKd,IALG,CADV,EAOK,KAPL,CAOW,IAPX,EAD2C;KAAd,CAAjC,CA7B+B;CAAX,CAAxB","file":"tests/skyss.test.js","sourcesContent":["import { expect } from 'chai';\nimport { first, last } from 'lodash';\nimport request from 'request';\nimport proxyquire from 'proxyquire';\nimport sinon from 'sinon';\nimport moment from 'moment';\nimport mockdate from 'mockdate';\nimport { asyncCatch, readTestData } from './utils.test';\n\nconst testData = readTestData('1.txt');\n\ndescribe('skyss tests', function() {\n\n    let sandbox;\n    let skyss, requestStub;\n    beforeEach(function(){\n        sandbox = sinon.sandbox.create();\n\n        mockdate.set(moment('12:30', 'hh:mm'));\n\n        requestStub = sandbox.stub(request, 'get');\n        skyss = proxyquire('./../server/skyss', { 'request': requestStub });\n\n        requestStub.callsArgWithAsync(1, false, {statusCode: 200}, testData);\n    });\n\n    afterEach(function(){\n        mockdate.reset();\n\n        sandbox.restore();\n    });\n\n    it('should find the next departure', function (done) {\n        skyss.getNextDeparture({ from : 'whatever', to: 'whatever' })\n            .then(asyncCatch((data) => {\n                expect(data).to.include({ time: '12:51', when: 'om 21 minutter' });\n            }, done))\n            .catch(done);\n    });\n\n    it('should find all departures', function(done){\n        skyss.getDepartures({ from: 'whatever', to: 'whatever' })\n            .then(asyncCatch((data) => {\n                expect(data).be.a('array');\n                expect(data.length).to.equal(10);\n                expect(first(data)).to.include({ time: '12:51', when: 'om 21 minutter'});\n                expect(last(data)).to.include({ time: '15:41', when: 'om 3 timer'});\n            }, done))\n            .catch(done);\n    });\n});\n"],"sourceRoot":"/source/"}